name: The Magic Story Machine
on:
  # schedule:
  #  - cron: 0 12 * * *
  workflow_dispatch:

jobs:
  storytellers:
    name: Count Storytellers
    runs-on: ubuntu-latest
    outputs:
      count: ${{ steps.count.outputs.count }}
    steps:
      - uses: actions/setup-node@v2
      - uses: actions/checkout@v2
      - run: npm ci
      - id: count
        uses: ./.github/actions/count-followers
        with:
          twitter-account-id: ${{ secrets.TWITTER_ACCOUNT_ID }}
          twitter-bearer-token: ${{ secrets.TWITTER_BEARER_TOKEN }}

  tell-story:
    name: Tell Magical Story
    runs-on: ubuntu-latest
    needs: [ storytellers ]
    if: ${{ needs.storytellers.outputs.count >= 3 }}
    env:
      END_TEXT: '# The End!'
    outputs:
      ended: ${{ steps.top-reply.outputs.text == env.END_TEXT }}
    steps:
      # First prepare Node.js and checkout the repository, in order to use internal actions in .github/actions.
      # Using GITHUB_TOKEN to be able to push changes and redeploy the GitHub Page later.
      - uses: actions/setup-node@v2
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - run: npm ci

      # Set up Google Cloud for Text to Speech
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@0aa92bcd70fc0929f052b47276d5e61f793c384b
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      # Fetch info about the reply with the most likes, for the most recent story tweet.
      - name: Get Top Reply
        id: top-reply
        uses: ./.github/actions/top-reply
        with:
          twitter-account-id: ${{ secrets.TWITTER_ACCOUNT_ID }}
          twitter-bearer-token: ${{ secrets.TWITTER_BEARER_TOKEN }}
      
      # Update/create the markdown file for the story.
      - name: Write Story
        env:
          STORY_NUMBER: ${{ steps.top-reply.outputs.story-number }}
          FILE: content/stories/story-${{ steps.top-reply.outputs.story-number }}.md
          TEXT: ${{ steps.top-reply.outputs.text }}
          IMAGE: ${{ steps.top-reply.outputs.image }}
          AUTHOR: ${{ steps.top-reply.outputs.username }}
          ENDED: ${{ steps.top-reply.outputs.text == env.END_TEXT }}
        run: |
          # Add new story part to end of file
          printf "%s\n\n%s\n\n%s\n" "<story-part username=\"$AUTHOR\" image=\"$IMAGE\">" "$TEXT" "</story-part>" >> $FILE

          # If new story part is "The End!" then update "ended" attribute in frontmatter header and prepare next story file.
          if $ENDED
          then
            sed -i '0,/ended: false/s//ended: true/' $FILE
            export NEXT_FILE=content/stories/story-$(( $STORY_NUMBER + 1 )).md
            printf "%s\n" "---" >> $NEXT_FILE
            printf "%s\n" "title: Untitled Story" >> $NEXT_FILE
            printf "%s\n" "number: $(( $STORY_NUMBER + 1 ))" >> $NEXT_FILE
            printf "%s\n" "ended: false" >> $NEXT_FILE
            printf "%s\n\n" "---" >> $NEXT_FILE
          fi
        
      - name: Convert Text To Audio
        env:
          STORY_NUMBER: ${{ steps.top-reply.outputs.story-number }}
          ENDED: ${{ steps.top-reply.outputs.text == env.END_TEXT }}
        run: |
          # Use Google text to speech
          curl -X POST \
          -H "Authorization: Bearer "$(gcloud auth application-default print-access-token) \
          -H "Content-Type: application/json; charset=utf-8" \
          -d '{"input":{"ssml":"<speak>${{ steps.top-reply.outputs.text-clean }}</speak>"},"voice":{"languageCode":"en-GB","name":"en-GB-Wavenet-D"},"audioConfig":{"audioEncoding":"MP3","pitch": -3}}' \
          https://texttospeech.googleapis.com/v1/text:synthesize | jq -r '.audioContent' | base64 -d >> static/audio/story-$STORY_NUMBER.mp3

          # Prepare next story audio file
          if $ENDED
          then
            cp static/audio/once-upon-a-time.mp3 static/audio/story-$(( $STORY_NUMBER + 1 )).mp3
          fi


      # Publish a new tweet, where people can again share ideas.
      - name: New Tweet
        id: new-tweet
        uses: ./.github/actions/tweet
        with:
          last-username: ${{ steps.top-reply.outputs.username }}
          last-reply-id: ${{ steps.top-reply.outputs.reply-id }}
          story-number: ${{ steps.top-reply.outputs.story-number }}
          the-end: ${{ steps.top-reply.outputs.text == env.END_TEXT }}
          twitter-consumer-key: ${{ secrets.TWITTER_CONSUMER_KEY }}
          twitter-consumer-secret: ${{ secrets.TWITTER_CONSUMER_SECRET }}
          twitter-access-token-key: ${{ secrets.TWITTER_ACCESS_TOKEN_KEY }}
          twitter-access-token-secret: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
      
      # Redeploy the GitHub Page with the ID of the new story tweet.
      - name: Update Repo and Website
        run: |
          # Replace and commit env vars in nuxt.config.js
          # (so that other workflows can redeploy the page without setting env vars)
          sed -i -E "s/NEXT_UPDATE: '[0-9]+'/NEXT_UPDATE: '$(date --date="tomorrow 12:00:00" +%s)'/" nuxt.config.js
          sed -i -E "s/LATEST_TWEET: '[0-9]+'/LATEST_TWEET: '${{ steps.new-tweet.outputs.tweet-id }}'/" nuxt.config.js
          
          # Commit and push new files
          git config --global user.name github-actions
          git config --global user.email github-actions@github.com
          git add .
          git commit -m "Story $STORY_NUMBER continues."
          git push

          # Deploy GitHub Page
          npm run generate
          npm run deploy

  raffle:
    name: Raffle the Pot
    runs-on: ubuntu-latest
    needs: [ tell-story ]
    if: ${{ needs.tell-story.outputs.ended == 'true' }}
    steps:
      - uses: actions/setup-node@v2
      - uses: actions/checkout@v2
      - run: npm ci
      - uses: ./.github/actions/raffle
        with:
          story-number: ${{ steps.top-reply.outputs.story-number }}
          sponsors-file: ./content/sponsors.json
          twitter-consumer-key: ${{ secrets.TWITTER_CONSUMER_KEY }}
          twitter-consumer-secret: ${{ secrets.TWITTER_CONSUMER_SECRET }}
          twitter-access-token-key: ${{ secrets.TWITTER_ACCESS_TOKEN_KEY }}
          twitter-access-token-secret: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}